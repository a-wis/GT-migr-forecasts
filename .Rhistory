.libPaths()
library(rstan)
install.packages("rstan")
library(rstan)
install.packages("callr")
library(rstan)
options(mc.cores = parallel::detectCores())
Sys.setenv(LOCAL_CPPFLAGS = '-march=native')
install.packages("humanleague")
library('humanleague')
gender=c(51,49)
age=c(17,20,32,21,10)
states=qis(list(1,2),list(gender,age))$result
states
qis(list(1,2),list(gender,age))$result
qis(list(1,2),list(gender,age))$result
qis(list(1,2),list(gender,age))$result
qis(list(1,2),list(gender,age))$result
?qis
qis(list(2,5),list(gender,age))$result
qis(list(1,5),list(gender,age))$result
qis(list(1,2),list(gender,age))$result
sum(age)
sum(gender)
ethic=c(10,70,20)
qis(list(1,2,3),list(gender,age,ethic))$result
qis(list(1,2,3),list(gender,age,ethic))$result
qis(list(1,2,3),list(gender,age,ethic))$result
qis(list(1,2,3),list(gender,age,ethic))$result
qis(list(1,2,3),list(gender,age,ethic))$result
qis(list(1,2,3),list(gender,age,ethic))$result
qis(list(1,2,3),list(gender,age,ethic))$result
qis(list(1,2,3),list(gender,age,ethic))$result
qis(list(1,2,3),list(gender,age,ethic))$result
ageByGender = array(c(1,2,5,3,4,3,4,5,1,2), dim=c(5,2))
ethnicityByGender = array(c(4,6,5,6,4,5), dim=c(3,2))
ageByGender
ethnicityByGender
sum(ageByGender)
sum(ethnicityByGender)
result = qis(list(c(1,2), c(3,2)), list(ageByGender, ethnicityByGender))
result$result
result$result
result$result
result$result
result$result
result = qis(list(c(5,2), c(3,2)), list(ageByGender, ethnicityByGender))
result$pop
ageByGender
qis(list(1,2,3),list(gender,age,ethic))$result
sum(qis(list(1,2,3),list(gender,age,ethic))$result)
states=qis(list(1,2),list(gender,age))$result
microunit=flatten(states,c("Gender","Age"))##base population
microunit
dy=function(microdata,years){
statename=c('A','B','C')
rateA=c(0.8,0.1,0.1)
##assuming all individuals follow the same transition rate to country B/C
##return rate is not considered
n=nrow(microdata)    #number of individuals at A
M=matrix(nrow = n, ncol = years + 1,
dimnames = list(paste("agent", 1:n, sep = " "),
paste("year", 0:years, sep = " "))) #initial framework
M[,1]=rep('A',n) #initial state for each individual/vectors
for (i in 1:n) {
for (t in 1:years) {
M[i,t+1]=sample(statename,prob = rateA,size = 1)
}
}
return(M)
}
m_y1=dy(microunit,5)
raw=cbind(microunit,m_y1)
raw
m_y1
82.5+75
(82.5+75)/2
(82.5+70)/2
83 + 70
153/2
82 + 70
80 + 70
(78+70)/2
18*18.03*4
18*4
75*18.03
327.82/19.8922
307.82/19.8922
5.6+25.85+24.7
5.6+25.85+24.7+16.8
5.6+25.85+24.7+16.8-60
5.6+25.85+24.7+16.8-60-16.8
15.16*8
18.03*120
161000/330000000
161000/330000000*100
loo=1:5
loo1=(loo==3)
loo1=(loo==3)*1
q=c(.02,.10,.25)
ofn <- function(x,q)sum(abs(q-qlnorm(c(0.05,0.5,0.95),x[1],x[2]))^2)
osol <- optim(c(1,1),ofn)
qlnorm(c(0.05,0.5,0.95),1,1)
qlnorm(c(0.05,0.5,0.95),.1,1)
qlnorm(c(0.05,0.5,0.95),.1,.1)
qlnorm(c(0.05,0.5,0.95),.1,.05)
qlnorm(c(0.05,0.5,0.95),.1,.001)
?qlnorm
quantile(rlnorm(1000,log(0.1),0.01),c(0.25,.5,.975))
quantile(rlnorm(1000,log(0.1),0.1),c(0.25,.5,.975))
quantile(rlnorm(1000,log(0.1),0.2),c(0.25,.5,.975))
quantile(rlnorm(1000,log(0.1),0.),c(0.25,.5,.975))
quantile(rlnorm(1000,log(0.1),0.5),c(0.25,.5,.975))
ofn <- function(x,q)sum(abs(q-qlnorm(c(0.05,0.5,0.95),log(.1),x[1]))^2)
osol <- optim(c(1,1),ofn)
ofn
ofn(1,q)
ofn(.1,q)
q
ofn <- function(x,q)sum(abs(q-qlnorm(c(0.05,0.5,0.95),log(.1),x[1]))^2)
osol <- optim(c(1),ofn)
osol <- optimi\w(c(1),ofn)
osol <- optimize(c(1),ofn)
osol <- optim(c(1),ofn(x,q))
ofn <- function(x,q)sum(abs(q-qlnorm(c(0.05,0.5,0.95),x[1],x[2]))^2)
?qlnorm
osol <- optim(c(0,.1),ofn(x,q))
osol <- optim(c(0,.1),ofn)
ofn <- function(x,q=q)sum(abs(q-qlnorm(c(0.05,0.5,0.95),x[1],x[2]))^2)
osol <- optim(c(0,.1),ofn)
osol <- optim(c(0.1,.1),ofn)
ofn <- function(x,q.=q)sum(abs(q.-qlnorm(c(0.05,0.5,0.95),x[1],x[2]))^2)
osol <- optim(c(0.1,.1),ofn)
osol
osol$par
log(0.1)
quantile(rlnorm(10000,osol$par),c(0.25,.5,.975))
quantile(rlnorm(10000,osol$par[1],osol$par[2]),c(0.25,.5,.975))
ofn <- function(x,q.=q)sum(abs(q.-qlnorm(c(0.05,0.95),x[1]-.5*x[2]^2,x[2]))^2)
osol$par
osol <- optim(c(0.1,.1),ofn)
warnings()
osol <- optim(c(0,.1),ofn)
osol$par
quantile(rlnorm(10000,osol$par),c(0.25,.5,.975))
quantile(rlnorm(10000,osol$par[1],osol$par[2]),c(0.25,.5,.975))
ofn <- function(x,q.=q)sum(abs(q.-qlnorm(c(0.05,0.95),log(0.1)-.5*x[1]^2,x[1]))^2)
osol <- optim(c(0,.1),ofn)
osol$par
warnings()
ofn <- function(x,q.=q[c(1,3)])sum(abs(q.-qlnorm(c(0.05,0.95),log(0.1)-.5*x[1]^2,x[1]))^2)
osol <- optim(c(0,.1),ofn)
osol$par
quantile(rlnorm(10000,osol$par[1],osol$par[2]),c(0.25,.5,.975))
ofn <- function(x,q.=q[c(1,3)])sum(abs(q.-qlnorm(c(0.025,0.975),log(0.1)-.5*x[1]^2,x[1]))^2)
osol <- optim(c(0,.1),ofn)
osol$par
quantile(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]),c(0.25,.5,.975))
quantile(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]),c(0.025,.5,.975))
mean(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1])
)
ofn <- function(x,q.=q)sum(abs(q.-qlnorm(c(0.05,0.95),x[1]-.5*x[2]^2,x[2]))^2)
osol <- optim(c(0,.1),ofn)
ofn <- function(x,q.=q)sum(abs(q.-qlnorm(c(0.025,0.975),x[1]-.5*x[2]^2,x[2]))^2)
ofn <- function(x,q.=q[c(1,3)])sum(abs(q.-qlnorm(c(0.025,0.975),x[1]-.5*x[2]^2,x[2]))^2)
osol <- optim(c(0,.1),ofn)
mean(rlnorm(10000,osol$par[1]-.5*osol$par[2]^2,osol$par[2])
)
quantile(rlnorm(10000,osol$par[1]-.5*osol$par[2]^2,osol$par[2]),c(0.025,.5,.975))
ofn <- function(x,q.=q[c(1,3)])sum(abs(q.-qlnorm(c(0.025,0.975),log(0.1)-.5*x[1]^2,x[1])))
osol <- optim(c(-2),ofn)
osol <- optim(c(0.5),ofn)
osol <- optim(c(0.5),ofn,method = "Brent")
osol <- optim(c(0.5),ofn,method = "Brent",lower = 0,upper = 1)
mean(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]))
quantile(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]),c(0.025,.5,.975))
osol$par
201/1e6
201/1e6*100
2020/12/31
2020-12-31
269*80
269*80+10284
(269*80+10284)/51259055
(269*80+10284)/51259055*100
360000/330000000
360000/330000000*100
2923/1e6
2923/1e6*100
2923/1e6*100*46,750,583
2923/1e6*100*46750583
2923/1e6*46750583
500000/46750583*100
osol$par
osol <- optim(c(0.5),ofn,method = "Brent")
q=c(.01,.1,.3)
ofn <- function(x,q.=q[c(1,3)])sum(abs(q.-qlnorm(c(0.025,0.975),log(0.1)-.5*x[1]^2,x[1])))
osol <- optim(c(0.5),ofn,method = "Brent",lower = 0,upper = 1)
mean(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]))
quantile(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]),c(0.025,.5,.975))
osol$par
?qgamma
ofng <- function(x,q.=q[c(1,3)])sum(abs(q.-qgamma(c(0.025,0.975),x[1],0.1/x[1])))
osolg <- optim(c(1),ofng,method = "Brent",lower = 0,upper = 100000)
mean(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]))
quantile(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]),c(0.025,.5,.975))
mean(rgamma(10000,osolg$par[1],0.1/osolg$par[1]))
quantile(rgamma(10000,osolg$par[1],0.1/osolg$par[1]),c(0.025,.5,.975))
ofn <- function(x,q.=q[c(1,3)])sum(abs(q.-qlnorm(c(0.025,0.975),log(0.1)-.5*x[1]^2,x[1]))^2)
osol <- optim(c(0.5),ofn,method = "Brent",lower = 0,upper = 1)
osol$par
mean(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]))
quantile(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]),c(0.025,.5,.975))
osolg$par
ofng <- function(x,q.=q[c(1,3)])sum(abs(q.-qgamma(c(0.025,0.975),x[1],0.1/x[1]))^2)
osolg <- optim(c(100),ofng,method = "Brent",lower = 0,upper = 100000)
mean(rgamma(10000,osolg$par[1],0.1/osolg$par[1]))
q
osolg$par
0.1/osolg$par
0.1/osolg$par*osolg$par
mean(rgamma(10000,shape = osolg$par[1],scale = 0.1/osolg$par[1]))
ofng <- function(x,q.=q[c(1,3)])sum(abs(q.-qgamma(c(0.025,0.975),shape=x[1],scale=0.1/x[1]))^2)
osolg <- optim(c(100),ofng,method = "Brent",lower = 0,upper = 100000)
mean(rgamma(10000,shape = osolg$par[1],scale = 0.1/osolg$par[1]))
quantile(rgamma(10000,osolg$par[1],0.1/osolg$par[1]),c(0.025,.5,.975))
quantile(rgamma(10000,shape=osolg$par[1],scale=0.1/osolg$par[1]),c(0.025,.5,.975))
hist(rgamma(10000,shape=osolg$par[1],scale=0.1/osolg$par[1]),100)
hist(rlnorm(10000,log(0.1)-.5*osol$par[1]^2,osol$par[1]),100)
osolg$par
osolg <- optim(c(0.1),ofng,method = "Brent",lower = 0,upper = 100000)
osolg$par
544.79*60
539.18*60+749
instainstall.packages("SemiCompRisks")
install.packages("SemiCompRisks")
library(SemiCompRisks)
library(flexsurv)
install.packages("flexsurv")
install.packages("flexsurv")
.libPaths()
.libPaths()
library(tidyverse)
.libPaths()
.libPaths()
install.packages(c("tidyverse", "flexsurve", "ggplot2", "rstan", "rstanarm", "shiny", "lattice", "latticeExtra", "readr", "readxl"))
install.packages("HMDHFDplus")
install.packages("jags", "R2jags", "ggmcmc", "ggfan")
install.packages(c("jags", "R2jags", "ggmcmc", "ggfan"))
?slide
??slide
install.packages("DataCombine")
library(DataCombine)
?slide
data(grunfeld, package = "dynsim")
library(dynsim)
install.packages("dynsim")
library(dynsim)
data(grunfeld, package = "dynsim")
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
View(grunfeld)
grunfeld$company <- as.factor(grunfeld$company)
M1 <- lm(invest ~ InvestLag + mvalue + kstock + company, data = grunfeld)
M1
M2 <- lm(invest ~ InvestLag + mvalue*kstock + company, data = grunfeld)
attach(grunfeld)
grunfeld <- slide(grunfeld, Var = "invest", GroupVar = "company",
NewVar = "InvestLag")
grunfeld$company <- as.factor(grunfeld$company)
attach(grunfeld)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.05),
kstock = quantile(kstock, 0.05),
4 dynsimGG
company4 = 1)
Scen2 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = mean(mvalue),
kstock = mean(kstock),
company4 = 1)
Scen3 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.95),
kstock = quantile(kstock, 0.95),
company4 = 1)
Scen1 <- data.frame(InvestLag = mean(InvestLag, na.rm = TRUE),
mvalue = quantile(mvalue, 0.05),
kstock = quantile(kstock, 0.05),
company4 = 1)
detach(grunfeld)
ScenComb <- list(Scen1, Scen2, Scen3)
Sim1 <- dynsim(obj = M1, ldv = "InvestLag", scen = ScenComb, n = 20)
Labels <- c("5th Percentile", "Mean", "95th Percentile")
dynsimGG(Sim1, leg.labels = Labels)
?predict.lm
dynsimGG(Sim1, leg.labels = Labels) + geom_lines(data=grunfeld %:% filter(company==4),aes(x=time,y=invest))
library(ggplot2)
dynsimGG(Sim1, leg.labels = Labels) + geom_lines(data=grunfeld %:% filter(company==4),aes(x=time,y=invest))
dynsimGG(Sim1, leg.labels = Labels) + geom_lines(data=grunfeld %>% filter(company==4),aes(x=time,y=invest))
library(tidyverse)
dynsimGG(Sim1, leg.labels = Labels) + geom_lines(data=grunfeld %>% filter(company==4),aes(x=time,y=invest))
p=dynsimGG(Sim1, leg.labels = Labels)
p + geom_lines(data=grunfeld %>% filter(company==4),aes(x=time,y=invest))
p + geom_line(data=grunfeld %>% filter(company==4),aes(x=time,y=invest))
ggplot() + geom_line(data=grunfeld %>% filter(company==4),aes(x=time,y=invest))
y=rnorm(20,3+0.5*(1:20),2)
plot(y)
my=lm(y~lag(y)+1)
my
summary(my)
my=lm(y~lag(y)+c(1:20))
summary(my)
?predict.ar
newdata=c(21,y[20])
yp=predict(my,newdata)
trend=1:20
ly=y[1:19]
yr=y[2:20]
trend=2:20
my=lm(yr~ly+trend)
my
newdata=data.frame(ly=y[20],trend=21)
yp=predict(my,newdata)
yp
y
plot(y)
newdata1=data.frame(ly=yp,trend=22)
yp1=predict(my,newdata1)
yp1
newdata2=data.frame(ly=yp1,trend=23)
yp2=predict(my,newdata2)
yp2
cl()
cclearPushBack())
clean()
my=lm(yr~ly+trend)
trend
yl
y=y[2:20]
y
yl
ly
y
ly
trend
my=lm(y~ly+trend)
newdata=data.frame(ly=y[19],trend=21)
newdata
yp=predict(my,newdata)
yp
newdata1=data.frame(ly=yp,trend=22)
yp1=predict(my,newdata1)
yp1
?predict.Arima
y
my=arima(y,order = c(1,0,0),xreg = trend)
my
ypn=predict.Arima(my,n.ahead=5,newxreg=c(21:25))
ypn=stats::predict.Arima(my,n.ahead=5,newxreg=c(21:25))
?predict.ar
?predict.Arima
ypn=predict(my,n.ahead=5,newxreg=c(21:25))
ypn
my
?forecast
plot(ypn)
library(forecast)
?forecast
plot(forecast(my))
plot(forecast(my,xnewreg=c(21:25)))
plot(forecast(my,xnewreg=trend=c(21:25)))
plot(forecast(my,xnewreg=c(trend=c(21:25))))
forecast(my,xnewreg=c(trend=c(21:25)))
forecast(my,newxreg=c(trend=c(21:25)))
trend
trendf=c(21:25)
forecast(my,newxreg=trendf,n.ahead=5)
?forecast.Arima
?forecast.Arima
class(my)
forecast(my,n.ahead=5,newxreg=trendf)
forecast(my,h=5,newxreg=trendf)
forecast(my,h=5,newxreg=trendf,model="Arima")
forecast(my,h=5,model="Arima")
forecast(my,h=5)
library(brms)
install.packages("brms")
library(loo)
log(10)
log(15)
log(30)
log(1)
log(0.5)
qt(0.025,53)
qt(0.975,53)
qt(0.975,70)
round(qt(0.975,70),2)
round(qt(0.975,70),1)
library(dlm)
install.packages("dlm")
library(dlm)
?dlm
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
.libPaths()
.libPaths()
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
setwd("C:/Users/msassaw5/Dropbox (The University of Manchester)/GitHub/GT-migr-forecasts")
.libPaths()
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("tidyverse")
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("gtable")
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("scales")
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("R6",dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library(tidyverse)
install.packages("generics","munsell",dependencies = TRUE)
install.packages(list("generics","munsell"),dependencies = TRUE)
install.packages("generics",dependencies = TRUE)
install.packages("munsell",dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("colorspace",dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("fansi",dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("utf8",dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("pkgconfig",dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("inline",dependencies = TRUE)
install.packages("inline",dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("pkgbuild",dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("prettyunits",dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("ggplot2",dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("V8", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("Rcpp", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("curl", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("gridExtra", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("loo", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("matrixStats", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages("codetools", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
sys.path()
Sys.info()
Sys.getenv()
Sys.getenv("PATH")
example(stan_model, package = "rstan", run.dontrun = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
Sys.getenv("BINPREF")
file.path(Sys.getenv("HOME"), ".Rprofile")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
example(stan_model, package = "rstan", run.dontrun = TRUE)
Sys.getenv("PATH")
